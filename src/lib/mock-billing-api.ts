import type { IBillingRecord } from "@/lib/types"

// Mock billing records store
const billingRecords: IBillingRecord[] = []

export const mockBillingApi = {
  // Generate PDF and return URL
  generateBillingPdf: async (
    billingData: Omit<IBillingRecord, "_id" | "billPdfUrl" | "createdAt" | "updatedAt">,
  ): Promise<string> => {
    await new Promise((resolve) => setTimeout(resolve, 2000)) // Simulate PDF generation delay

    // Mock PDF URL - in real implementation, this would be generated by a PDF service
    const pdfUrl = `https://mock-storage.com/bills/${billingData.invoiceNumber}-${Date.now()}.pdf`

    return pdfUrl
  },

  // Save billing record
  saveBillingRecord: async (
    billingData: Omit<IBillingRecord, "_id" | "createdAt" | "updatedAt">,
  ): Promise<IBillingRecord> => {
    await new Promise((resolve) => setTimeout(resolve, 500))

    const newBillingRecord: IBillingRecord = {
      ...billingData,
      _id: Date.now().toString(),
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    billingRecords.push(newBillingRecord)
    return newBillingRecord
  },

  // Get billing records for a client
  getBillingRecords: async (clientId: string): Promise<IBillingRecord[]> => {
    await new Promise((resolve) => setTimeout(resolve, 300))
    return billingRecords.filter((record) => record.clientId === clientId)
  },

  // Get all billing records
  getAllBillingRecords: async (): Promise<IBillingRecord[]> => {
    await new Promise((resolve) => setTimeout(resolve, 300))
    return [...billingRecords]
  },

  // Update billing record
  updateBillingRecord: async (id: string, updates: Partial<IBillingRecord>): Promise<IBillingRecord> => {
    await new Promise((resolve) => setTimeout(resolve, 500))

    const index = billingRecords.findIndex((record) => record._id === id)
    if (index === -1) throw new Error("Billing record not found")

    billingRecords[index] = {
      ...billingRecords[index],
      ...updates,
      updatedAt: new Date(),
    }

    return billingRecords[index]
  },

  // Delete billing record
  deleteBillingRecord: async (id: string): Promise<void> => {
    await new Promise((resolve) => setTimeout(resolve, 500))

    const index = billingRecords.findIndex((record) => record._id === id)
    if (index === -1) throw new Error("Billing record not found")

    billingRecords.splice(index, 1)
  },
}
